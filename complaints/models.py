from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
import qrcode
from io import BytesIO
from django.core.files import File
import random
import string
import os

class Complaint(models.Model):
    STATUS_CHOICES = [
        ('submitted', '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¶‡§∞‡•ç‡§ú ‡§π‡•Å‡§à'),
        ('verified', '‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§'),
        ('resolved', '‡§π‡§≤ ‡§π‡•Å‡§à'),
        ('feedback', '‡§´‡•Ä‡§°‡§¨‡•à‡§ï'),
        ('performance', '‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§®'),
        ('escalation', '‡§è‡§∏‡•ç‡§ï‡•á‡§≤‡•á‡§∂‡§®'),
        ('dashboard', '‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°'),
    ]
    
    FEEDBACK_CHOICES = [
        ('happy', 'üôÇ'),
        ('neutral', 'üòê'),
        ('angry', 'üò°'),
    ]
    
    # Basic Information
    name = models.CharField(max_length=100, verbose_name="‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ")
    location = models.CharField(max_length=100, verbose_name="‡§∏‡•ç‡§•‡§æ‡§®")
    issue = models.TextField(verbose_name="‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£")
    photo = models.ImageField(upload_to='complaints/photos/', verbose_name="‡§´‡•ã‡§ü‡•ã")
    qr_code = models.ImageField(upload_to='complaints/qrcodes/', blank=True, null=True, verbose_name="QR ‡§ï‡•ã‡§°")
    timestamp = models.DateTimeField(auto_now_add=True, verbose_name="‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø")
    
    # New fields for complaint tracking
    complaint_id = models.CharField(max_length=20, unique=True, blank=True, verbose_name="‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§Ü‡§à‡§°‡•Ä")
    description = models.TextField(verbose_name="‡§µ‡§ø‡§µ‡§∞‡§£", blank=True)
    voice_note = models.FileField(upload_to='complaints/voice_notes/', null=True, blank=True, verbose_name="‡§µ‡•â‡§á‡§∏ ‡§®‡•ã‡§ü")
    
    # Status Tracking
    status = models.CharField(
        max_length=20, 
        choices=STATUS_CHOICES, 
        default='submitted',
        verbose_name="‡§∏‡•ç‡§•‡§ø‡§§‡§ø"
    )
    feedback = models.CharField(
        max_length=10, 
        choices=FEEDBACK_CHOICES, 
        null=True, 
        blank=True,
        verbose_name="‡§´‡•Ä‡§°‡§¨‡•à‡§ï"
    )
    
    # Timestamps
    created_at = models.DateTimeField(default=timezone.now, verbose_name="‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ")
    verified_at = models.DateTimeField(null=True, blank=True, verbose_name="‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ")
    resolved_at = models.DateTimeField(null=True, blank=True, verbose_name="‡§π‡§≤ ‡§π‡•ã‡§®‡•á ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ")
    
    # Staff Information
    assigned_staff = models.CharField(
        max_length=100, 
        null=True, 
        blank=True,
        verbose_name="‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§∏‡•ç‡§ü‡§æ‡§´"
    )
    escalated_to = models.CharField(
        max_length=100, 
        null=True, 
        blank=True,
        verbose_name="‡§è‡§∏‡•ç‡§ï‡•á‡§≤‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ"
    )
    
    # Performance Metrics
    sla_breached = models.BooleanField(default=False, verbose_name="SLA ‡§â‡§≤‡•ç‡§≤‡§Ç‡§ò‡§®")
    trust_badge = models.BooleanField(default=False, verbose_name="‡§ü‡•ç‡§∞‡§∏‡•ç‡§ü ‡§¨‡•à‡§ú")

    class Meta:
        verbose_name = "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§"
        verbose_name_plural = "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡•á‡§Ç"
        ordering = ['-created_at']

    def generate_complaint_id(self):
        """‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§Ü‡§à‡§°‡•Ä ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç"""
        date_str = timezone.now().strftime('%Y%m%d')
        random_str = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        return f"CMP{date_str}{random_str}"

    def generate_qr_code(self):
        """QR ‡§ï‡•ã‡§° ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç"""
        if self.complaint_id:
            qr_data = f"Complaint ID: {self.complaint_id}\nName: {self.name}\nLocation: {self.location}\nIssue: {self.issue[:50]}..."
            
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(qr_data)
            qr.make(fit=True)
            
            img = qr.make_image(fill_color="black", back_color="white")
            
            buffer = BytesIO()
            img.save(buffer, format='PNG')
            
            # Ensure the file name is unique
            filename = f'qrcode_{self.complaint_id}_{timezone.now().strftime("%H%M%S")}.png'
            
            self.qr_code.save(
                filename,
                File(buffer),
                save=False
            )

    def save(self, *args, **kwargs):
        # Generate complaint ID if not exists
        if not self.complaint_id:
            self.complaint_id = self.generate_complaint_id()
        
        # Set description from issue if description is empty
        if not self.description and self.issue:
            self.description = self.issue
        
        # Generate QR code if complaint_id exists and qr_code is not generated
        if self.complaint_id and not self.qr_code:
            self.generate_qr_code()
        
        # Update timestamps based on status
        if self.status == 'verified' and not self.verified_at:
            self.verified_at = timezone.now()
        elif self.status == 'resolved' and not self.resolved_at:
            self.resolved_at = timezone.now()
        
        super().save(*args, **kwargs)

    def get_status_display_hindi(self):
        """‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç"""
        status_dict = dict(self.STATUS_CHOICES)
        return status_dict.get(self.status, self.status)

    def get_feedback_display_emoji(self):
        """‡§á‡§Æ‡•ã‡§ú‡•Ä ‡§Æ‡•á‡§Ç ‡§´‡•Ä‡§°‡§¨‡•à‡§ï ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç"""
        feedback_dict = dict(self.FEEDBACK_CHOICES)
        return feedback_dict.get(self.feedback, '')

    # Admin ‡§Æ‡•á‡§Ç image preview ‡§ï‡•á ‡§≤‡§ø‡§è methods
    def photo_preview(self):
        if self.photo:
            return f'<a href="{self.photo.url}" target="_blank"><img src="{self.photo.url}" width="100" height="100" style="object-fit: cover; border-radius: 8px;" /></a>'
        return "No Photo"
    photo_preview.allow_tags = True
    photo_preview.short_description = "‡§´‡•ã‡§ü‡•ã ‡§™‡•ç‡§∞‡§ø‡§µ‡•ç‡§Ø‡•Ç"

    def qr_code_preview(self):
        if self.qr_code:
            return f'<a href="{self.qr_code.url}" target="_blank"><img src="{self.qr_code.url}" width="100" height="100" style="object-fit: cover; border-radius: 8px;" /></a>'
        return "No QR Code"
    qr_code_preview.allow_tags = True
    qr_code_preview.short_description = "QR ‡§ï‡•ã‡§° ‡§™‡•ç‡§∞‡§ø‡§µ‡•ç‡§Ø‡•Ç"

    def __str__(self):
        return f"{self.name} - {self.location} - {self.complaint_id}"

# ‚úÖ ‡§™‡•ç‡§∞‡§ß‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è AdminProfile model
class AdminProfile(models.Model):
    user = models.OneToOneField(
        User, 
        on_delete=models.CASCADE,
        verbose_name="‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ"
    )
    village_name = models.CharField(
        max_length=100, 
        verbose_name="‡§ó‡§æ‡§Å‡§µ ‡§ï‡§æ ‡§®‡§æ‡§Æ"
    )
    phone_number = models.CharField(
        max_length=15, 
        blank=True, 
        null=True,
        verbose_name="‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞"
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name="‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à"
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ"
    )

    class Meta:
        verbose_name = "‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§® ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤"
        verbose_name_plural = "‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§® ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤"

    def __str__(self):
        return f"{self.user.username} ({self.village_name})"

# ‚úÖ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§Æ‡•â‡§°‡§≤
class ComplaintTracking(models.Model):
    complaint = models.ForeignKey(
        Complaint, 
        on_delete=models.CASCADE,
        related_name='tracking_records',
        verbose_name="‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§"
    )
    status = models.CharField(
        max_length=20, 
        choices=Complaint.STATUS_CHOICES,
        verbose_name="‡§∏‡•ç‡§•‡§ø‡§§‡§ø"
    )
    notes = models.TextField(
        blank=True, 
        null=True,
        verbose_name="‡§®‡•ã‡§ü‡•ç‡§∏"
    )
    updated_by = models.ForeignKey(
        User, 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True,
        verbose_name="‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ"
    )
    updated_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name="‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ"
    )

    class Meta:
        verbose_name = "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó"
        verbose_name_plural = "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó"
        ordering = ['-updated_at']

    def __str__(self):
        return f"{self.complaint.complaint_id} - {self.status}"

# ‚úÖ ‡§∏‡•ç‡§ü‡§æ‡§´ ‡§Æ‡•á‡§Æ‡•ç‡§¨‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•â‡§°‡§≤
class StaffMember(models.Model):
    user = models.OneToOneField(
        User, 
        on_delete=models.CASCADE,
        verbose_name="‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ"
    )
    admin_profile = models.ForeignKey(
        AdminProfile, 
        on_delete=models.CASCADE,
        related_name='staff_members',
        verbose_name="‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§® ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤"
    )
    designation = models.CharField(
        max_length=100,
        verbose_name="‡§™‡§¶‡§®‡§æ‡§Æ"
    )
    phone_number = models.CharField(
        max_length=15,
        verbose_name="‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞"
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name="‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à"
    )

    class Meta:
        verbose_name = "‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡§¶‡§∏‡•ç‡§Ø"
        verbose_name_plural = "‡§∏‡•ç‡§ü‡§æ‡§´ ‡§∏‡§¶‡§∏‡•ç‡§Ø"

    def __str__(self):
        # Use username if full name is not available
        full_name = self.user.get_full_name()
        if not full_name:
            full_name = self.user.username
        return f"{full_name} - {self.designation}"